<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
        <context:property-placeholder location="classpath:config/redis.properties" ignore-unresolvable="true"/>

    <!--连接池-->
        <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
            <!--最大空闲数-->
            <property name="maxIdle" value="${redis.maxIdle}" />
            <!--连接池的最大数据库连接数  -->
            <property name="maxTotal" value="${redis.maxTotal}" />
            <!--最大建立连接等待时间-->
            <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
            <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
            <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
            <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
            <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
            <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
            <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
            <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
            <property name="testOnBorrow" value="true" />
            <!--在空闲时检查有效性, 默认false  -->
            <property name="testWhileIdle" value="true" />
        </bean>

    <!--连接工厂-->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
           <property name="hostName" value="${redis.host}"/>
           <property name="port" value="${redis.port}"/>
            <!--客户端超时时间单位是毫秒  -->
            <property name="timeout" value="${redis.timeout}"></property>
            <property name="poolConfig" ref="poolConfig"/>
            <constructor-arg name="clusterConfig" ref="redisClusterConfig"/>
    </bean>

    <!-- Redis集群配置 -->
    <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="6"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6380"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6381"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6382"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6383"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6384"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6385"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>

    <!--键值对的序列化器-->
    <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <bean id="hashStringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="hashValueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>

    <!--开启事务 ， 可用Transactional注解控制  Spring封装了RedisTemplate对象来进行对Redis的各种操作，它支持所有的Redis原生的api。-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer" ref="stringSerializer"/>
        <property name="valueSerializer" ref="keySerializer"/>
        <property name="hashKeySerializer" ref="hashStringSerializer"/>
        <property name="hashValueSerializer" ref="hashValueSerializer"/>
        <property name="enableTransactionSupport" value="true"/>
    </bean>

   <!-- <bean id="redisutil" class="com.zl.common.RedisUtil">
    <property name="redisTemplate" ref="redisTemplate"/>
    </bean>-->
</beans>